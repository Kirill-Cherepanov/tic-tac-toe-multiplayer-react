Search updates

searchParams: {
  matchTime: { 
    value: 10 || 20 || 30 || 60 || Infinity, 
    strict: boolean
  },
  breakTime: { 
    value: 10 || 20 || 30 || 60 || Infinity, 
    strict: boolean
  },
}

ON: enter - accepts username. Checks whether given username already exists in the database and sends responce based on that:
EMIT: enterSuccess - the nickname isn't already in the db
EMIT: enterFailure - the nickname is already in the db
Than saves search params, updates the db and initiates searchUpdate based on them.
EMIT: searchUpdate - reads the database and sends data based on search params.

ON: leaveSearch - delete user from the database, trace back all the invites and delete them too.

ON: disconnect - the same as leaveSearch but if the user is in game then leaveGame()

ON: changeSearchParams - accepts searchParams. Change search parameters.



Invitation mechanics

ON: invite - accepts nickname of the invited player, checks if such a player exists in the database, checks if their search params are compatible, checks if such an invite hasn't already been sent and if so updates the database.

ON: cancelInvite - accepts nickname of who's the invite being canceled (invitee) on, and whether socket is the inviter or invited. Checks whether the invitee is in the database and updates the db.

ON: acceptInvite - accepts nickname of the inviter, checks if the inviter is in the database, checks if the inviter has actually send the invite and if so creates a room (in socket.io making a room is unnecessary, we only need to change it in the db) with both players, then:
EMIT: openRoom - sends break time and opponent's nickname to both players.
Then pause(), deletes both usernames from 'Search' branch in the db (send them to 'ActiveGames' branch as a room), updates the db, declares timer and assigns it to global variable.



Gameplay mechanics

ON: ready (1) - emits opponentReady to opponent and changes 'ON: ready (1)' listener to (2)
ON: ready (2) - emits startGame to both players, starts the timer for the game and stops it for the player that doesn't make a move at this turn. Once the time is over, emits gameOver. Then changes listener to (1)
EMIT: opponentReady - sends nothing.
EMIT: startGame - sends isFirstMove.

ON: move - Accepts move position. Stops the timer. Checks the move's validity, if invalid emits gameOver, else updates the database. Checks for whether the victory conditions are fullfilled, if not, emits opponentMove to opponent and starts the opponent's timer through global object, if yes, emits gameOver to both players and pause()
EMIT: opponentMove - sends the position of the move.
EMIT: gameOver - sends victor's username.

ON: leaveGame - leaveGame(). Update the db.
EMIT: dismissGame - sends a message of what has happened (it should be displayed until the user clicks on leave button himself while start game button should disappear).



Utils

function pause - starts the timer on some condition (for example if the current socket is higher in alphabetical order) (condition is in place to prevent starting two timers instead of one (we don't need two timers on a break since the time is the same for both players)). Once the time is over emits dismissGame.

function leaveGame - if socket is in the search branch, transfer him to the game branch. If opponent is in the game branch, transfer him to the search. Delete the game from the db.
